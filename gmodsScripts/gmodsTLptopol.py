#!/usr/bin/env python

"""
    Requirements: Python 3 or higher
                  Antechamber and related AmberTools
                  OpenBabel (strongly recommended for use with acpype)
				  acpype (latest version recommended with all its requirements)
				  Gromacs (Compulsory)
                  flask (Compulsory)
                  flaskwebgui (recommended)
                  pyfladesk (recommended)

    This code is released under GNU General Public License V3.

          <<<  NO WARRANTY AT ALL!!!  >>>

    It was inspired by:

    - CS50 online training for which this code serves as part of the final project

	- PLEASE Read the README.md file and also follow instructions on the GUI and/or Terminal

	Daniyan, Oluwatoyin Michael, B.Pharm. M.Sc. (Pharmacology) and Ph.D. (Science) Biochemistry
    Department of Pharmacology, Faculty of Pharmacy
    Obafemi Awolowo Universiy, Ile-Ife, Nigeria.
    >>http://www.oauife.edu.ng<<

    mdaniyan@oauife.edu.ng; toyinpharm@gmail.com
"""

import sys

if sys.version_info[0] < 3:
	raise Exception("Python 3 or a more recent version is required.")

import os
import subprocess
from pathlib import Path
import time
import shutil
import random
import string
import math
import glob
from colored import fore, back, style

from gmodsScripts.gmodsHelpers import indexoflines, insertdetails, printWarning, printNote

def TLtopol(xrecfile, tlpcomtop, tff):
	tlpcwdir = Path.cwd()
	tltopol = "tlptopol.top"
	tltopolopen = open(tltopol, "+a")

	# Insert the header information into the tlptopol.top file
	tltopolheaders = ["; This file was generated by modifying tleap/acpype generated topology file on one hand", "; And by adding selected pdb2gmx generated details on the other hands", "; The modification was done by removing duplicate atomtypes and/or replacing", "; them with equivalent compatible atoms as found in ffnonbonded.itp file of the selected forcefield", "; It was created to be used as alternative to pdb2gmx generated topologies when necessary", "; If used successfully it should have been renamed from tlptopol.top to topol.top for subsequent MDS"]

	for header in tltopolheaders:
		tltopolopen.write(header)
		tltopolopen.write('\n')
	tltopolopen.write('\n')

	# Insert the forcefiled parameter header from pdb2gmx topol.top file into tlptopol.top file
	xrecindex = indexoflines(xrecfile)
	tsindex = xrecindex['system']
	xrecfileopen = open(xrecfile, "r")
	xrecreadlines = xrecfileopen.readlines()

	at_id = 0
	for xL in xrecreadlines:
		xLat = xL.split()
		if ('Include' in xLat and 'forcefield' in xLat and 'parameters' in xLat):
			tltopolopen.write(xL)
			at_id += 1
			tltopolopen.write(xrecreadlines[at_id])
			tltopolopen.write('\n')
			break
		else:
			at_id += 1

	# Insert the content of tleap/acpype generated topol file from atomtypes into tlptopol.top
	tlpcindex = indexoflines(tlpcomtop)
	tlpcopen = open(tlpcomtop, "r")
	tlpcreadlines = tlpcopen.readlines()
	taindex = tlpcindex['atomtypes']

	for tline in tlpcreadlines:
		if not tline in tlpcreadlines[0:int(taindex)]:
			tltopolopen.write(tline)

	tltopolopen.close()
	tlpcopen.close()

	# Create a new file and populate it with relevant details found at the end of pdb2gmx topol file
	tlmnfile = "tlptopol_mn.itp"
	tlmnfileopen = open(tlmnfile, "+a")

	xrecfileopen.seek(0)
	xn = 0
	for xline in xrecreadlines:
		xlinelist = xline.split()
		if "POSRES" in xlinelist:
			tlmnfileopen.write('\n')
			xnid = xn - 1
			while xnid < int(tsindex):
				tlmnfileopen.write(xrecreadlines[xnid])
				xnid += 1
			tlmnfileopen.write('\n')
			break
		else:
			xn += 1

	tlmnfileopen.close()
	xrecfileopen.close()

	# Insert the details into the tlptopol.top file
	insertL = "[ system ]"
	insertdetails(tltopol, tlmnfile, insertL)

	# We shall check for and remove duplicates in atomtypes between gmx standard and amber/tleap generated 
	#Determine the appropriate forcefield directory selected at run time

	tlpindex = indexoflines(tltopol)
	atlp = int(tlpindex['atomtypes'])
	mtlp = int(tlpindex['moleculetype'])

	topol = open(tltopol, "r")
	topolreadlines = topol.readlines()
	nf = 1
	ff = ""
	for tline in topolreadlines:
		if ('Include' in tline.split() and 'forcefield' in tline.split() and 'parameters' in tline.split()):
			ln1 = topolreadlines[nf].split()
			ln2 = ln1[1].split('"')[1].split('/')
			for fd in ln2:
				if Path(fd).suffix == ".ff":
					ff = fd
					break
		else:
			nf += 1

	print("Your detected forcefiled directory is", ff)
	if not ff == tff:
		print("However", ff, "does not match what was detected earlier", tff)
		print("It is recommended to use the forcefield detected earlier")
		print("To use the recommended forcefield {", tff, "}, type YES/y")
		print("To continue with currently detected forcefield {", ff, "}, press ENTER")
		response = input("Response: ")
		if (response.lower() == "yes" or response.lower() == "y"):
			ff = tff
			print("The detected directory has been changed to", ff)
	else:
		print(ff, "matched the earlier detected forcefield.")
		
	# Get the absolute path to the forcefield directory and copy ffnonbonded.itp file
	gmxtopdir = " "
	try:
		gmxtopdir = os.path.join(os.environ.get('GMXDATA'), 'top', ff)
	except:
		print("We are unable to autodetect your forcefield directory")
		print("Please supply absolute path to your forcefield directory")
		print("Usually /path-to-gromacs/share/gromacs/top/your-selected-forcefield.ff")
		while True:
			gmxtopdir = input("Path to Forcefield: ")
			if not os.path.isdir(gmxtopdir):
				print("Directory you supplied does not exist. Please check and try again")
			else:
				break

	if not os.path.isdir(gmxtopdir):
		print(gmxtopdir, "that was autodetected, is not a valid forcefield directory")
		print("Please supply the correct absolute path to your forcefield directory")
		print("Usually /path-to-gromacs/share/gromacs/top/your-selected-forcefield.ff")
		while True:
			gmxtopdir = input("Path to Forcefield: ")
			if not os.path.isdir(gmxtopdir):
				print("Directory you supplied does not exist. Please check and try again")
			else:
				break

	print("Your topology directory is", gmxtopdir)
	time.sleep(5)

	lsgmxtopdir = os.listdir(gmxtopdir)
	for tp in lsgmxtopdir:
		if tp == "ffnonbonded.itp":
			shutil.copy(os.path.join(gmxtopdir, tp), './')

	# Get the atomtypes present in ffnonbonded.itp as list
	listffb = []
	fn = 0

	ffb = open("ffnonbonded.itp", "r")
	ffbreadlines = ffb.readlines()

	if ff[0:4].lower() == "opls":
		for fb in ffbreadlines:
			if 'opls_128' in fb.split():
				break
			else:
				fn += 1
		ffb.seek(0)

		for fb in ffbreadlines[fn:]:
			try:
				if not (fb.split() == [] or fb.split()[0] == "[" or fb.split()[0] == ";" or fb.split()[0][0] == '#' or fb.split()[0][0] == ';' or fb.split()[1] in listffb):
					if fb.split()[0].split('_')[0].lower() == 'opls':
						listffb.append(fb.split()[1])
			except IndexError:
				pass
	else:
		for fb in ffbreadlines[fn:]:
			try:
				if not (fb.split() == [] or fb.split()[0] == "[" or fb.split()[0] == ";" or fb.split()[0][0] == '#' or fb.split()[0][0] == ';' or fb.split()[0] in listffb):
					listffb.append(fb.split()[0])
			except IndexError:
				pass

	ffb.seek(0)

	# Check the tlptopol.top file to remove duplicate by comparing with ffnonbonded.itp list of atomtypes
	print("Checking for and removing duplicate atomtypes from tlptopol.top...")
	time.sleep(5)
	mtlp = mtlp - 1
	topol.seek(0)
	ntopol = open("ntlptopol.top", "+a")
	for aline in topolreadlines[0:atlp]:
		ntopol.write(aline)

	topol.seek(0)
	for bline in topolreadlines[atlp:mtlp]:
		try:
			if not (bline.split() == [] or bline.split()[0].lower() in listffb or bline.split()[0].upper() in listffb):
				ntopol.write(bline)
		except IndexError:
			pass
	ntopol.write('\n')

	topol.seek(0)

	if ff[0:4].lower() == "opls":
		btlp = 0
		for bd in topolreadlines:
			if 'bonds' in bd.split() and bd.split()[0] == '[' and bd.split()[1] == 'bonds':
				break
			else:
				btlp += 1

		topol.seek(0)
		for bdline in topolreadlines[mtlp:btlp]:
			if not (bdline.split() == [] or bdline.split()[0][0] == ';' or bdline.split()[0][0] == '['):
				matom = bdline.split()[1]
				ffb.seek(0)
				replace = " "
				bfound = 0
				for fline in ffbreadlines[fn:]:
					if fline.split()[1] == matom or fline.split()[1].lower() == matom or fline.split()[1] == matom.upper() and 'opls' in fline.split()[0].split('_'):
						replace = bdline.replace(matom, fline.split()[0], 1)
						bfound += 1
						break
				if not bfound > 0:
					ntopol.write(bdline)
				else:
					ntopol.write(replace)
			else:
				ntopol.write(bdline)
		ntopol.write('\n')

		topol.seek(0)
		for cline in topolreadlines[btlp:]:
			ntopol.write(cline)

	else:	
		for cline in topolreadlines[mtlp:]:
			ntopol.write(cline)

	ffb.close()
	topol.close()
	ntopol.close()

	# Now we shall backup the tlptopol.top and rename ntlptopol.top as tlptopol.top
	os.rename('tlptopol.top', '##tlptopol##')
	os.rename('ntlptopol.top', 'tlptopol.top')

	# Check to be sure tlptopol.top has been successfully generated
	checktlp = os.listdir()
	if not "tlptopol.top" in checktlp:
		printWarning("Something went wrong. Generating tlptopol.top file was not successful")
		print("If you need it later, check and correct any error, then rerun")
		return tlpcomtop
	else:
		printNote("tlptopol.top has been generated successfully")
		printNote("PLEASE NOTE:")
		print("Two topology files are now included in solvation folder - topol.top and tlptopol.top")
		print("By default, topol.top will be used. If topol.top failed, tlptopol will be used")
		print("If not used now, it will be copied into the gmxmds subfolder")
		print("To use it later, rename to topol.top and backup the original topol.top")
		time.sleep(10)
		return 'tlptopol.top'
